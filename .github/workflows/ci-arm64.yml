name: Build OpenSSL Arm64

on:
  pull_request:
    branches: [ "dev" ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name'
        required: false
        type: string
      openssl_windows_arm64_msvc_build:
        description: 'OpenSSL Windows Arm64 MSVC build'
        required: false
        default: true
        type: boolean
      openssl_windows_arm64_clangcl_build:
        description: 'OpenSSL Windows Arm64 clang-cl build'
        required: false
        default: true
        type: boolean
      openssl_linux_aarch64_gcc_build:
        description: 'OpenSSL Linux AArch64 gcc build'
        required: false
        default: true
        type: boolean
      benchmark_snapshot:
        description: 'Create benchmark snapshot'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      branch:
        description: 'Branch name'
        required: false
        type: string

jobs:
  build-openssl-windows-arm64-msvc:
    if: ${{ inputs.openssl_windows_arm64_msvc_build }}

    runs-on: [self-hosted, Windows, ARM64, GCC, D2ps_v5]
    timeout-minutes: 600

    steps:
    - name: Git checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.branch }}
    
    - name: Build OpenSSL on Windows Arm64 with MSVC
      shell: cmd
      run: |
        echo on
        git fetch origin ${{ github.event.repository.default_branch }}
        git checkout origin/${{ github.event.repository.default_branch }} -- .github/workflows/scripts
        call "%ProgramFiles%\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" arm64
        set VSCMD_DEBUG=3
        set PATH=%PATH%;%VCINSTALLDIR%\Tools\Llvm\ARM64\bin
        perl Configure VC-WIN64-ARM
        nmake
        nmake test
        call .github\workflows\scripts\benchmark.bat 2> benchmark_arm64_msvc.txt
        type benchmark_arm64_msvc.txt

    - name: Archive openssl_windows_arm64_msvc_benchmark.zip
      uses: actions/upload-artifact@v3
      if: ${{ inputs.benchmark_snapshot }}
      with:
        name: openssl_windows_arm64_msvc_benchmark.zip
        path: benchmark_arm64_msvc.txt
        retention-days: 3

  build-openssl-windows-arm64-clangcl:
    if: ${{ inputs.openssl_windows_arm64_clangcl_build }}

    runs-on: [self-hosted, Windows, ARM64, GCC, D2ps_v5]
    timeout-minutes: 600

    steps:
    - name: Git checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.branch }}

    - name: Build OpenSSL on Windows Arm64 with clang-cl
      shell: cmd
      run: |
        echo on
        git fetch origin ${{ github.event.repository.default_branch }}
        git checkout origin/${{ github.event.repository.default_branch }} -- .github/workflows/scripts
        call "%ProgramFiles%\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" arm64
        set VSCMD_DEBUG=3
        set PATH=%PATH%;%VCINSTALLDIR%\Tools\Llvm\ARM64\bin
        perl Configure VC-CLANG-WIN64-CLANGASM-ARM
        nmake
        nmake test
        call .github\workflows\scripts\benchmark.bat 2> benchmark_arm64_clangcl.txt
        type benchmark_clangcl.txt

    - name: Archive openssl_windows_arm64_clangcl_benchmark.zip
      uses: actions/upload-artifact@v3
      if: ${{ inputs.benchmark_snapshot }}
      with:
        name: openssl_windows_arm64_clangcl_benchmark.zip
        path: benchmark_arm64_clangcl.txt
        retention-days: 3

  build-openssl-linux-aarch64-gcc:
    if: ${{ inputs.openssl_linux_aarch64_gcc_build }}

    runs-on: [self-hosted, Linux, ARM64, GCC, D2ps_v5]
    timeout-minutes: 600

    steps:
    - name: Git checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.branch }}

    - name: Build OpenSSL on Linux AArch64 with GCC
      run: |
        git fetch origin ${{ github.event.repository.default_branch }}
        git checkout origin/${{ github.event.repository.default_branch }} -- .github/workflows/scripts
        ./Configure
        make
        make test
        .github/workflows/scripts/benchmark.sh > benchmark_aarch64_gcc.txt 2>&1
        cat benchmark_aarch64_gcc.txt

    - name: Archive openssl_linux_aarch64_gcc_benchmark.zip
      uses: actions/upload-artifact@v3
      if: ${{ inputs.benchmark_snapshot }}
      with:
        name: openssl_linux_aarch64_gcc_benchmark.zip
        path: benchmark_aarch64_gcc.txt
        retention-days: 3

  create-benchmark-snapshot:
    if: ${{ inputs.benchmark_snapshot }}
    needs: [build-openssl-linux-aarch64-gcc]

    runs-on: ubuntu-latest

    steps:
    - name: Git checkout
      uses: actions/checkout@v3

    - name: Dowload openssl_linux_aarch64_gcc_benchmark.zip
      uses: actions/download-artifact@v3
      with:
        name: openssl_linux_aarch64_gcc_benchmark.zip

#    - uses: actions/download-artifact@v3
#    with:
#      name: build-openssl-windows-arm64-clangcl.zip

    - name: Create PR for a benchmark snapshot
      run: |
        git config --global user.name "$GITHUB_ACTOR"
        git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git fetch origin ${{ github.event.repository.default_branch }}
        git checkout origin/${{ github.event.repository.default_branch }} -- .github/workflows/scripts
        .github/workflows/scripts/benchmark_snapshot.sh
        benchmark_asset=$(date +".assets/benchmark_snapshot_%Y-%m-%d_%H_%M_%S.png")
        [ ! -d .assets ] && mkdir .assets
        mv benchmark_snapshot.png $benchmark_asset
        git restore .github/workflows/scripts
        git checkout assets
        git add $benchmark_asset
        git commit -am "* add a benchmark image"
        git push
        git checkout -b benchmark_snapshot
        git add .github/workflows/data
        git commit -am "* add a benchmark snapshot"
        git push --force origin benchmark_snapshot
        PR_RESPONSE=$(curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -d '{
            "title": "Add benchmark snapshot",
            "body": "![image](https://raw.githubusercontent.com/Windows-on-ARM-Experiments/openssl/assets/$benchmark_asset)",
            "head": "benchmark_snapshot",
            "base": "${{ github.event.repository.default_branch }}"
          }' \
          https://api.github.com/repos/$GITHUB_REPOSITORY/pull/7)
        echo "$PR_RESPONSE"
